{"version":3,"file":"component---src-pages-newsroom-all-set-announcement-index-tsx-d14ddd95613568115827.js","mappings":"uKAgHA,IA7FA,YAMc,IAAD,IALXA,YAAAA,OAKW,MALG,GAKH,MAJXC,KAAAA,OAIW,MAJJ,KAII,MAHXC,KAAAA,OAGW,MAHJ,GAGI,EAFXC,EAEW,EAFXA,MACAC,EACW,EADXA,MAEQC,GAASC,EAAAA,EAAAA,gBAAc,cAAvBD,KAiBR,GAMIA,aAAAA,EAAAA,EAAME,eAAgB,CAAC,EALZC,EADf,EACER,YACOS,EAFT,EAEEL,MACAM,EAHF,EAGEA,QACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,iBAKIC,EAAkBb,GAAeQ,EACjCM,EAAeL,EACfM,EAAS,GAAML,GAJEL,GAAQ,CAAC,GAAxBW,YAIoCb,GAASS,GAIrD,OAFAK,QAAQC,IAARD,cAA2BF,GAGzBI,EAAAA,cAACC,EAAAA,OAAD,CACEC,eAAgB,CACdpB,KAAAA,GAEFG,MAAOA,EACPkB,cAAeR,EAAY,QAAWA,OAAiBS,EACvDrB,KAAM,CACJ,CACEsB,KAAK,cACLC,QAASZ,GAEX,CACEa,SAAS,WACTD,QAASrB,GAEX,CACEsB,SAAS,iBACTD,QAASZ,GAEX,CACEa,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,WACTD,QAASV,GAEX,CACES,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASd,GAEX,CACEa,KAAK,gBACLC,QAASrB,GAEX,CACEoB,KAAK,sBACLC,QAASZ,GAEX,CACEW,KAAK,gBACLC,QAASV,IAEXY,OAAOzB,IAKf,C,wDCxFA,IAdwD,SAAC,GAKlD,IAJLE,EAII,EAJJA,MACAwB,EAGI,EAHJA,UACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,cAEA,OACEX,EAAAA,cAAAA,MAAAA,CAAKS,UAAWG,IAAW,0BAA2BH,IACpDT,EAAAA,cAAAA,KAAAA,CAAIS,UAAWG,IAAW,YAAaD,IAAiB1B,GACxDe,EAAAA,cAAAA,MAAAA,CAAKS,UAAWG,IAAW,mBAAoBF,KATrD,C,8FCyCA,UAxC8E,SAAC,GAEzE,IADJG,EACI,EADJA,KAEQC,GAAMC,EAAAA,EAAAA,kBAAND,EACAE,EAA2BH,EAA3BG,uBAER,OACEhB,EAAAA,cAACiB,EAAAA,EAAD,KACEjB,EAAAA,cAACkB,EAAAA,EAAD,CACEjC,MAAO6B,EAAE,6CACTjC,YAAaiC,EAAE,8CAIjBd,EAAAA,cAAAA,UAAAA,CAASS,UAAU,yEAEjBT,EAAAA,cAACmB,EAAAA,EAAD,CACElC,MAAO6B,EAAE,yDACTH,cAAc,WACdD,mBAAmB,mBAErBV,EAAAA,cAAAA,MAAAA,CAAKS,UAAU,gFACZO,EAAuBI,MAAMC,KAAI,WAAWC,GAAQ,IACnD,EADmD,EAAhBC,MACO,CAAC,EAAnCtC,EAAR,EAAQA,MAAOuC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,IAC1B,OACEzB,EAAAA,cAAAA,MAAAA,CAAKS,UAAU,oCAAoCa,IAAKA,GACtDtB,EAAAA,cAAC0B,EAAAA,GAAD,CACEzC,MAAOA,EACP0C,SAAUH,EACVC,IAAKA,IAPZ,MAtBX,C","sources":["webpack://tonghuaholding-website/./src/components/Seo/index.tsx","webpack://tonghuaholding-website/./src/components/UnderlineHeader/index.tsx","webpack://tonghuaholding-website/./src/pages/newsroom/all-set-announcement/index.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype SeoProps = {\n  description?: string;\n  lang?: string;\n  meta?: Array<{ name: string; content: string }>;\n  image?: string;\n  title: string;\n};\n\nfunction Seo({\n  description = '',\n  lang = 'en',\n  meta = [],\n  image,\n  title,\n}: SeoProps) {\n  const { site } = useStaticQuery<GatsbyTypes.SeoQuery>(\n    graphql`\n      query Seo {\n        site {\n          pathPrefix\n          siteMetadata {\n            title\n            description\n            twitter\n            defaultMetaImage\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const {\n    description: siteDescription,\n    title: siteTitle,\n    siteUrl,\n    twitter,\n    defaultMetaImage,\n  } = site?.siteMetadata || {};\n\n  const { pathPrefix } = site || {};\n\n  const metaDescription = description || siteDescription;\n  const defaultTitle = siteTitle;\n  const metaImage = `${siteUrl}${pathPrefix}${image || defaultMetaImage}`;\n\n  console.log(`metaImage: `, metaImage);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : undefined}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:image`,\n          content: metaImage,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: `twitter:image`,\n          content: metaImage,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nexport default Seo;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype UnderlineHeaderProps = {\n  title: string;\n  className?: string;\n  underlineClassName?: string;\n  textClassName?: string;\n};\n\nconst UnderlineHeader: React.FC<UnderlineHeaderProps> = ({\n  title,\n  className,\n  underlineClassName,\n  textClassName,\n}) => {\n  return (\n    <div className={classNames('flex flex-col space-y-2', className)}>\n      <h2 className={classNames('font-bold', textClassName)}>{title}</h2>\n      <div className={classNames('h-0.5 rounded-md', underlineClassName)} />\n    </div>\n  );\n};\n\nexport default UnderlineHeader;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { SetAnnouncementCard } from '@/components/cards';\nimport UnderlineHeader from '@/components/UnderlineHeader';\nimport MainLayout from '@/layouts/MainLayout';\nimport { useTranslation } from 'gatsby-plugin-react-i18next';\nimport Seo from '@/components/Seo';\n\ntype NewsRoomAllSetAnnouncementProps =\n  PageProps<GatsbyTypes.NewsRoomAllSetAnnouncementQuery>;\n\nconst NewsRoomAllSetAnnouncement: React.FC<NewsRoomAllSetAnnouncementProps> = ({\n  data,\n}) => {\n  const { t } = useTranslation();\n  const { allSetAnnouncementJson } = data;\n\n  return (\n    <MainLayout>\n      <Seo\n        title={t('Seo.NewsRoom.AllSetAnnouncementPage.Title')}\n        description={t('Seo.NewsRoom.AllSetAnnouncementPage.Desc')}\n      />\n\n      {/* Section 1: ข่าวแจ้งตลาดหลักทรัพย์ทั้งหมด */}\n      <section className=\"px-4 pt-10 pb-20 lg:pb-28 md:px-6 lg:px-16 lg:py-20 max-w-7xl mx-auto\">\n        {/* ข่าวแจ้งตลาดหลักทรัพย์ทั้งหมด */}\n        <UnderlineHeader\n          title={t('Pages.NewsRoom.AllSetAnnouncementPage.Section-1.Title')}\n          textClassName=\"text-2xl\"\n          underlineClassName=\"bg-neutral-900\"\n        />\n        <div className=\"flex flex-col mt-10 md:mt-4 space-y-10 md:flex-wrap md:space-y-0 md:flex-row\">\n          {allSetAnnouncementJson.edges.map(({ node }, key) => {\n            const { title, createdAt, pdf } = node || {};\n            return (\n              <div className=\"md:w-1/2 lg:w-1/3 md:px-4 md:py-6\" key={key}>\n                <SetAnnouncementCard\n                  title={title}\n                  createAt={createdAt}\n                  pdf={pdf}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </section>\n    </MainLayout>\n  );\n};\n\nexport default NewsRoomAllSetAnnouncement;\n\nexport const query = graphql`\n  query NewsRoomAllSetAnnouncement($language: String!) {\n    allSetAnnouncementJson(sort: { fields: createdAt, order: DESC }) {\n      edges {\n        node {\n          title\n          createdAt\n          pdf\n        }\n      }\n    }\n    locales: allLocale(\n      filter: { language: { eq: $language }, ns: { eq: \"translation\" } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n"],"names":["description","lang","meta","image","title","site","useStaticQuery","siteMetadata","siteDescription","siteTitle","siteUrl","twitter","defaultMetaImage","metaDescription","defaultTitle","metaImage","pathPrefix","console","log","React","Helmet","htmlAttributes","titleTemplate","undefined","name","content","property","concat","className","underlineClassName","textClassName","classNames","data","t","useTranslation","allSetAnnouncementJson","MainLayout","Seo","UnderlineHeader","edges","map","key","node","createdAt","pdf","SetAnnouncementCard","createAt"],"sourceRoot":""}