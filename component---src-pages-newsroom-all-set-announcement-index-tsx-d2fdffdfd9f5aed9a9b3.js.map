{"version":3,"file":"component---src-pages-newsroom-all-set-announcement-index-tsx-d2fdffdfd9f5aed9a9b3.js","mappings":"6JAmEA,IAjDA,YAA4D,IAAD,IAA5CA,YAAAA,OAA4C,MAA9B,GAA8B,EAA1BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MAC9BC,GAASC,EAAAA,EAAAA,gBAAc,cAAvBD,KAiBR,GAMIA,aAAAA,EAAAA,EAAME,eAAgB,CAAC,EALZC,EADf,EACEN,YACOO,EAFT,EAEEL,MACAM,EAHF,EAGEA,QACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,iBAGMC,GAAeR,GAAQ,CAAC,GAAxBQ,WAEFC,EAAkBZ,GAAeM,EACjCO,EAAeN,EACfO,EAAS,GAAMN,GAAUP,GAAK,GAAOU,EAAaD,GAExD,OACEK,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQb,GAASW,GACjBE,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASL,IAClCG,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,WAAWC,QAASf,IAC/Ba,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,iBAAiBC,QAASL,IACrCG,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,UAAUC,QAAQ,YAC7BF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,WAAWC,QAASH,IAC/BC,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,wBAClCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,QAASR,IACtCM,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASf,IACpCa,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,sBAAsBC,QAASL,IAC1CG,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASH,IAK1C,C,wDC3CA,IAdwD,SAAC,GAKlD,IAJLZ,EAII,EAJJA,MACAgB,EAGI,EAHJA,UACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,cAEA,OACEL,EAAAA,cAAAA,MAAAA,CAAKG,UAAWG,IAAW,0BAA2BH,IACpDH,EAAAA,cAAAA,KAAAA,CAAIG,UAAWG,IAAW,YAAaD,IAAiBlB,GACxDa,EAAAA,cAAAA,MAAAA,CAAKG,UAAWG,IAAW,mBAAoBF,KATrD,C,8FCyCA,UAxC8E,SAAC,GAEzE,IADJG,EACI,EADJA,KAEQC,GAAMC,EAAAA,EAAAA,kBAAND,EACAE,EAA2BH,EAA3BG,uBAER,OACEV,EAAAA,cAACW,EAAAA,EAAD,KACEX,EAAAA,cAACY,EAAAA,EAAD,CACEzB,MAAOqB,EAAE,6CACTvB,YAAauB,EAAE,8CAIjBR,EAAAA,cAAAA,UAAAA,CAASG,UAAU,yEAEjBH,EAAAA,cAACa,EAAAA,EAAD,CACE1B,MAAOqB,EAAE,yDACTH,cAAc,WACdD,mBAAmB,mBAErBJ,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,gFACZO,EAAuBI,MAAMC,KAAI,WAAWC,GAAQ,IACnD,EADmD,EAAhBC,MACO,CAAC,EAAnC9B,EAAR,EAAQA,MAAO+B,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,IAC1B,OACEnB,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,oCAAoCa,IAAKA,GACtDhB,EAAAA,cAACoB,EAAAA,GAAD,CACEjC,MAAOA,EACPkC,SAAUH,EACVC,IAAKA,IAPZ,MAtBX,C","sources":["webpack://tonghuaholding-website/./src/components/Seo/index.tsx","webpack://tonghuaholding-website/./src/components/UnderlineHeader/index.tsx","webpack://tonghuaholding-website/./src/pages/newsroom/all-set-announcement/index.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype SeoProps = {\n  description?: string;\n  lang?: string;\n  meta?: Array<{ name: string; content: string }>;\n  image?: string;\n  title: string;\n};\n\nfunction Seo({ description = '', image, title }: SeoProps) {\n  const { site } = useStaticQuery<GatsbyTypes.SeoQuery>(\n    graphql`\n      query Seo {\n        site {\n          pathPrefix\n          siteMetadata {\n            title\n            description\n            twitter\n            defaultMetaImage\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const {\n    description: siteDescription,\n    title: siteTitle,\n    siteUrl,\n    twitter,\n    defaultMetaImage,\n  } = site?.siteMetadata || {};\n\n  const { pathPrefix } = site || {};\n\n  const metaDescription = description || siteDescription;\n  const defaultTitle = siteTitle;\n  const metaImage = `${siteUrl}${image || `${pathPrefix}${defaultMetaImage}`}`;\n\n  return (\n    <>\n      <title>{title || defaultTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"og:title\" content={title} />\n      <meta name=\"og:description\" content={metaDescription} />\n      <meta name=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={metaImage} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={twitter} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <meta name=\"twitter:image\" content={metaImage} />\n    </>\n  );\n}\n\nexport default Seo;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype UnderlineHeaderProps = {\n  title: string;\n  className?: string;\n  underlineClassName?: string;\n  textClassName?: string;\n};\n\nconst UnderlineHeader: React.FC<UnderlineHeaderProps> = ({\n  title,\n  className,\n  underlineClassName,\n  textClassName,\n}) => {\n  return (\n    <div className={classNames('flex flex-col space-y-2', className)}>\n      <h2 className={classNames('font-bold', textClassName)}>{title}</h2>\n      <div className={classNames('h-0.5 rounded-md', underlineClassName)} />\n    </div>\n  );\n};\n\nexport default UnderlineHeader;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { SetAnnouncementCard } from '@/components/cards';\nimport UnderlineHeader from '@/components/UnderlineHeader';\nimport MainLayout from '@/layouts/MainLayout';\nimport { useTranslation } from 'gatsby-plugin-react-i18next';\nimport Seo from '@/components/Seo';\n\ntype NewsRoomAllSetAnnouncementProps =\n  PageProps<GatsbyTypes.NewsRoomAllSetAnnouncementQuery>;\n\nconst NewsRoomAllSetAnnouncement: React.FC<NewsRoomAllSetAnnouncementProps> = ({\n  data,\n}) => {\n  const { t } = useTranslation();\n  const { allSetAnnouncementJson } = data;\n\n  return (\n    <MainLayout>\n      <Seo\n        title={t('Seo.NewsRoom.AllSetAnnouncementPage.Title')}\n        description={t('Seo.NewsRoom.AllSetAnnouncementPage.Desc')}\n      />\n\n      {/* Section 1: ข่าวแจ้งตลาดหลักทรัพย์ทั้งหมด */}\n      <section className=\"px-4 pt-10 pb-20 lg:pb-28 md:px-6 lg:px-16 lg:py-20 max-w-7xl mx-auto\">\n        {/* ข่าวแจ้งตลาดหลักทรัพย์ทั้งหมด */}\n        <UnderlineHeader\n          title={t('Pages.NewsRoom.AllSetAnnouncementPage.Section-1.Title')}\n          textClassName=\"text-2xl\"\n          underlineClassName=\"bg-neutral-900\"\n        />\n        <div className=\"flex flex-col mt-10 md:mt-4 space-y-10 md:flex-wrap md:space-y-0 md:flex-row\">\n          {allSetAnnouncementJson.edges.map(({ node }, key) => {\n            const { title, createdAt, pdf } = node || {};\n            return (\n              <div className=\"md:w-1/2 lg:w-1/3 md:px-4 md:py-6\" key={key}>\n                <SetAnnouncementCard\n                  title={title}\n                  createAt={createdAt}\n                  pdf={pdf}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </section>\n    </MainLayout>\n  );\n};\n\nexport default NewsRoomAllSetAnnouncement;\n\nexport const query = graphql`\n  query NewsRoomAllSetAnnouncement($language: String!) {\n    allSetAnnouncementJson(sort: { fields: createdAt, order: DESC }) {\n      edges {\n        node {\n          title\n          createdAt\n          pdf\n        }\n      }\n    }\n    locales: allLocale(\n      filter: { language: { eq: $language }, ns: { eq: \"translation\" } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n"],"names":["description","image","title","site","useStaticQuery","siteMetadata","siteDescription","siteTitle","siteUrl","twitter","defaultMetaImage","pathPrefix","metaDescription","defaultTitle","metaImage","React","name","content","className","underlineClassName","textClassName","classNames","data","t","useTranslation","allSetAnnouncementJson","MainLayout","Seo","UnderlineHeader","edges","map","key","node","createdAt","pdf","SetAnnouncementCard","createAt"],"sourceRoot":""}