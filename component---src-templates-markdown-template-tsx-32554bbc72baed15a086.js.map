{"version":3,"file":"component---src-templates-markdown-template-tsx-32554bbc72baed15a086.js","mappings":"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","sources":["webpack://tonghuaholding-website/./src/components/Seo/index.tsx","webpack://tonghuaholding-website/./src/templates/MarkdownTemplate.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype SeoProps = {\n  description?: string;\n  lang?: string;\n  meta?: Array<{ name: string; content: string }>;\n  image?: string;\n  title: string;\n};\n\nfunction Seo({ description = '', image, title }: SeoProps) {\n  const { site } = useStaticQuery<GatsbyTypes.SeoQuery>(\n    graphql`\n      query Seo {\n        site {\n          pathPrefix\n          siteMetadata {\n            title\n            description\n            twitter\n            defaultMetaImage\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const {\n    description: siteDescription,\n    title: siteTitle,\n    siteUrl,\n    twitter,\n    defaultMetaImage,\n  } = site?.siteMetadata || {};\n\n  const { pathPrefix } = site || {};\n\n  const metaDescription = description || siteDescription;\n  const defaultTitle = siteTitle;\n  const metaImage = `${siteUrl}${image || `${pathPrefix}${defaultMetaImage}`}`;\n\n  return (\n    <>\n      <title>{title || defaultTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"og:title\" content={title} />\n      <meta name=\"og:description\" content={metaDescription} />\n      <meta name=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={metaImage} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={twitter} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <meta name=\"twitter:image\" content={metaImage} />\n    </>\n  );\n}\n\nexport default Seo;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { ShareButton } from '@/components/buttons';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport MainLayout from '@/layouts/MainLayout';\nimport Seo from '@/components/Seo';\n\ntype MarkdownTemplateProps = PageProps<GatsbyTypes.MarkdownTemplateQuery>;\n\nconst MarkdownTemplate = ({\n  data: { markdownRemark, site },\n}: MarkdownTemplateProps) => {\n  const { siteMetadata, pathPrefix } = site || {};\n  const { siteUrl } = siteMetadata || {};\n  const { html, frontmatter } = markdownRemark || {};\n  const { title, description, cover, slug, category, date } = frontmatter || {};\n\n  const coverImage =\n    cover?.childImageSharp?.gatsbyImageData.images.fallback.src;\n\n  const shareUrl = `${siteUrl}${pathPrefix}${category}${slug}`;\n\n  return (\n    <MainLayout>\n      <Seo title={title || ''} description={description} image={coverImage} />\n      <section className=\"relative px-4 md:px-6 lg:px-16 py-10 lg:py-20 max-w-4xl mx-auto\">\n        <h1 className=\"font-bold text-2xl lg:text-3xl text-neutral-900\">\n          {title}\n        </h1>\n        <h2 className=\"text-sm text-neutral-600 mt-2\">{date}</h2>\n        <ShareButton url={shareUrl} className=\"mt-7\" />\n        {cover?.childImageSharp && (\n          <div className=\"mt-10\">\n            <div className=\"!aspect-w-16 !aspect-h-9\">\n              <GatsbyImage\n                alt={title || ''}\n                image={cover.childImageSharp.gatsbyImageData}\n                className=\"object-cover w-full h-full rounded-lg\"\n              />\n            </div>\n          </div>\n        )}\n        <div\n          dangerouslySetInnerHTML={{ __html: html || '<div />' }}\n          className=\"mt-10 markdown\"\n        />\n        <hr className=\"border-0 h-px bg-neutral-900 mt-10 w-full\" />\n        <ShareButton url={shareUrl} className=\"mt-10\" />\n      </section>\n    </MainLayout>\n  );\n};\n\nexport default MarkdownTemplate;\n\nexport const pageQuery = graphql`\n  query MarkdownTemplate(\n    $language: String!\n    $slug: String!\n    $category: String!\n  ) {\n    site {\n      pathPrefix\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(\n      frontmatter: {\n        lang: { eq: $language }\n        category: { eq: $category }\n        slug: { eq: $slug }\n      }\n    ) {\n      html\n      frontmatter {\n        title\n        slug\n        category\n        description\n        date(formatString: \"DD/MM/YYYY\")\n        cover {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n    locales: allLocale(\n      filter: { language: { eq: $language }, ns: { eq: \"translation\" } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n"],"names":["description","image","title","site","useStaticQuery","siteMetadata","siteDescription","siteTitle","siteUrl","twitter","defaultMetaImage","pathPrefix","metaDescription","defaultTitle","metaImage","React","name","content","data","markdownRemark","html","frontmatter","cover","slug","category","date","coverImage","childImageSharp","_cover$childImageShar","gatsbyImageData","images","fallback","src","shareUrl","MainLayout","Seo","className","ShareButton","url","GatsbyImage","alt","dangerouslySetInnerHTML","__html"],"sourceRoot":""}