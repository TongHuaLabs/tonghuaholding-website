{"version":3,"file":"component---src-templates-markdown-template-tsx-d6c7307a25ec36d57b61.js","mappings":"uKAgHA,IA7FA,YAMc,IAAD,IALXA,YAAAA,OAKW,MALG,GAKH,MAJXC,KAAAA,OAIW,MAJJ,KAII,MAHXC,KAAAA,OAGW,MAHJ,GAGI,EAFXC,EAEW,EAFXA,MACAC,EACW,EADXA,MAEQC,GAASC,EAAAA,EAAAA,gBAAc,cAAvBD,KAiBR,GAMIA,aAAAA,EAAAA,EAAME,eAAgB,CAAC,EALZC,EADf,EACER,YACOS,EAFT,EAEEL,MACAM,EAHF,EAGEA,QACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,iBAKIC,EAAkBb,GAAeQ,EACjCM,EAAeL,EACfM,EAAS,GAAML,GAJEL,GAAQ,CAAC,GAAxBW,YAIoCb,GAASS,GAIrD,OAFAK,QAAQC,IAARD,cAA2BF,GAGzBI,EAAAA,cAACC,EAAAA,OAAD,CACEC,eAAgB,CACdpB,KAAAA,GAEFG,MAAOA,EACPkB,cAAeR,EAAY,QAAWA,OAAiBS,EACvDrB,KAAM,CACJ,CACEsB,KAAK,cACLC,QAASZ,GAEX,CACEa,SAAS,WACTD,QAASrB,GAEX,CACEsB,SAAS,iBACTD,QAASZ,GAEX,CACEa,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,WACTD,QAASV,GAEX,CACES,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASd,GAEX,CACEa,KAAK,gBACLC,QAASrB,GAEX,CACEoB,KAAK,sBACLC,QAASZ,GAEX,CACEW,KAAK,gBACLC,QAASV,IAEXY,OAAOzB,IAKf,C,oFC7DA,UA1CyB,SAAC,GAEG,UAD3B0B,KAAQC,EACmB,EADnBA,eAER,EAD2B,EADHxB,MAEqB,CAAC,EAAtCE,EAAR,EAAQA,aAAcS,EAAtB,EAAsBA,WACdN,GAAYH,GAAgB,CAAC,GAA7BG,QACR,EAA8BmB,GAAkB,CAAC,EAAzCC,EAAR,EAAQA,KACR,EADA,EAAcC,aACmD,CAAC,EAA1D3B,EAAR,EAAQA,MAAOJ,EAAf,EAAeA,YAAagC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,KAAMC,EAAzC,EAAyCA,KAEnCC,EACJH,SADc,UACdA,EAAOI,uBADO,aACdC,EAAwBC,gBAAgBC,OAAOC,SAASC,IAE1D,OACEtB,EAAAA,cAACuB,EAAAA,EAAD,KACEvB,EAAAA,cAACwB,EAAAA,EAAD,CAAKvC,MAAOA,GAAS,GAAIJ,YAAaA,EAAaG,MAAOgC,IAC1DhB,EAAAA,cAAAA,UAAAA,CAASyB,UAAU,mEACjBzB,EAAAA,cAAAA,KAAAA,CAAIyB,UAAU,mDACXxC,GAEHe,EAAAA,cAAAA,KAAAA,CAAIyB,UAAU,iCAAiCV,GAC/Cf,EAAAA,cAAC0B,EAAAA,GAAD,CAAaC,IAAG,GAAKpC,EAAUM,EAAaiB,EAAQW,UAAU,UAC7DZ,aAAAA,EAAAA,EAAOI,kBACNjB,EAAAA,cAAAA,MAAAA,CAAKyB,UAAU,SACbzB,EAAAA,cAAAA,MAAAA,CAAKyB,UAAU,4BACbzB,EAAAA,cAAC4B,EAAAA,EAAD,CACEC,IAAK5C,GAAS,GACdD,MAAO6B,EAAMI,gBAAgBE,gBAC7BM,UAAU,4CAKlBzB,EAAAA,cAAAA,MAAAA,CACE8B,wBAAyB,CAAEC,OAAQpB,GAAQ,WAC3Cc,UAAU,mBAEZzB,EAAAA,cAAAA,KAAAA,CAAIyB,UAAU,8CACdzB,EAAAA,cAAC0B,EAAAA,GAAD,CAAaC,IAAG,GAAKpC,EAAUuB,EAAQW,UAAU,WApCzD,C","sources":["webpack://tonghuaholding-website/./src/components/Seo/index.tsx","webpack://tonghuaholding-website/./src/templates/MarkdownTemplate.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype SeoProps = {\n  description?: string;\n  lang?: string;\n  meta?: Array<{ name: string; content: string }>;\n  image?: string;\n  title: string;\n};\n\nfunction Seo({\n  description = '',\n  lang = 'en',\n  meta = [],\n  image,\n  title,\n}: SeoProps) {\n  const { site } = useStaticQuery<GatsbyTypes.SeoQuery>(\n    graphql`\n      query Seo {\n        site {\n          pathPrefix\n          siteMetadata {\n            title\n            description\n            twitter\n            defaultMetaImage\n            siteUrl\n          }\n        }\n      }\n    `,\n  );\n\n  const {\n    description: siteDescription,\n    title: siteTitle,\n    siteUrl,\n    twitter,\n    defaultMetaImage,\n  } = site?.siteMetadata || {};\n\n  const { pathPrefix } = site || {};\n\n  const metaDescription = description || siteDescription;\n  const defaultTitle = siteTitle;\n  const metaImage = `${siteUrl}${pathPrefix}${image || defaultMetaImage}`;\n\n  console.log(`metaImage: `, metaImage);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : undefined}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:image`,\n          content: metaImage,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: `twitter:image`,\n          content: metaImage,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nexport default Seo;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { ShareButton } from '@/components/buttons';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport MainLayout from '@/layouts/MainLayout';\nimport Seo from '@/components/Seo';\n\ntype MarkdownTemplateProps = PageProps<GatsbyTypes.MarkdownTemplateQuery>;\n\nconst MarkdownTemplate = ({\n  data: { markdownRemark, site },\n}: MarkdownTemplateProps) => {\n  const { siteMetadata, pathPrefix } = site || {};\n  const { siteUrl } = siteMetadata || {};\n  const { html, frontmatter } = markdownRemark || {};\n  const { title, description, cover, slug, date } = frontmatter || {};\n\n  const coverImage =\n    cover?.childImageSharp?.gatsbyImageData.images.fallback.src;\n\n  return (\n    <MainLayout>\n      <Seo title={title || ''} description={description} image={coverImage} />\n      <section className=\"relative px-4 md:px-6 lg:px-16 py-10 lg:py-20 max-w-4xl mx-auto\">\n        <h1 className=\"font-bold text-2xl lg:text-3xl text-neutral-900\">\n          {title}\n        </h1>\n        <h2 className=\"text-sm text-neutral-600 mt-2\">{date}</h2>\n        <ShareButton url={`${siteUrl}${pathPrefix}${slug}`} className=\"mt-7\" />\n        {cover?.childImageSharp && (\n          <div className=\"mt-10\">\n            <div className=\"!aspect-w-16 !aspect-h-9\">\n              <GatsbyImage\n                alt={title || ''}\n                image={cover.childImageSharp.gatsbyImageData}\n                className=\"object-cover w-full h-full rounded-lg\"\n              />\n            </div>\n          </div>\n        )}\n        <div\n          dangerouslySetInnerHTML={{ __html: html || '<div />' }}\n          className=\"mt-10 markdown\"\n        />\n        <hr className=\"border-0 h-px bg-neutral-900 mt-10 w-full\" />\n        <ShareButton url={`${siteUrl}${slug}`} className=\"mt-10\" />\n      </section>\n    </MainLayout>\n  );\n};\n\nexport default MarkdownTemplate;\n\nexport const pageQuery = graphql`\n  query MarkdownTemplate($language: String!, $slug: String!) {\n    site {\n      pathPrefix\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(\n      frontmatter: { lang: { eq: $language }, slug: { eq: $slug } }\n    ) {\n      html\n      frontmatter {\n        title\n        slug\n        description\n        date(formatString: \"MMMM DD, YYYY\")\n        cover {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n    locales: allLocale(\n      filter: { language: { eq: $language }, ns: { eq: \"translation\" } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n"],"names":["description","lang","meta","image","title","site","useStaticQuery","siteMetadata","siteDescription","siteTitle","siteUrl","twitter","defaultMetaImage","metaDescription","defaultTitle","metaImage","pathPrefix","console","log","React","Helmet","htmlAttributes","titleTemplate","undefined","name","content","property","concat","data","markdownRemark","html","frontmatter","cover","slug","date","coverImage","childImageSharp","_cover$childImageShar","gatsbyImageData","images","fallback","src","MainLayout","Seo","className","ShareButton","url","GatsbyImage","alt","dangerouslySetInnerHTML","__html"],"sourceRoot":""}