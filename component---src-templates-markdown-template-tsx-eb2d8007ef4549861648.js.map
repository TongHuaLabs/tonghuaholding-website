{"version":3,"file":"component---src-templates-markdown-template-tsx-eb2d8007ef4549861648.js","mappings":"8KAuCA,UAjCyB,SAAC,GAEI,IAAD,IAD3BA,KAAQC,EACmB,EADnBA,eAGAC,IAFmB,EADHC,MAES,IAAzBC,cAC4B,IAA5BF,QACR,EAA8BD,GAAkB,GAAxCI,EAAR,EAAQA,KACR,EADA,EAAcC,aACsC,GAA5CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,KAE5B,OACE,gCACE,2BAASC,UAAU,uEACjB,sBAAIA,UAAU,wBAAwBJ,GACtC,sBAAII,UAAU,iCAAiCD,GAC/C,gBAAC,KAAD,CAAaE,IAAG,GAAKV,EAAUO,EAAQE,UAAU,SAChDH,GACC,uBAAKG,UAAU,mBACb,uBAAKA,UAAU,0BACb,uBACEE,KAAKC,EAAAA,EAAAA,IAAWN,GAAS,IACzBG,UAAU,iCAKlB,uBACEI,wBAAyB,CAAEC,OAAQX,GAAQ,WAC3CM,UAAU","sources":["webpack://tonghuaholding-website/./src/templates/MarkdownTemplate.tsx"],"sourcesContent":["import React from 'react';\nimport { graphql, PageProps, withPrefix } from 'gatsby';\nimport { ShareButton } from '@/components/buttons';\n\ntype MarkdownTemplateProps = PageProps<GatsbyTypes.MarkdownTemplateQuery>;\n\nconst MarkdownTemplate = ({\n  data: { markdownRemark, site },\n}: MarkdownTemplateProps) => {\n  const { siteMetadata } = site || {};\n  const { siteUrl } = siteMetadata || {};\n  const { html, frontmatter } = markdownRemark || {};\n  const { title, cover, slug, date } = frontmatter || {};\n\n  return (\n    <>\n      <section className=\"px-4 md:px-6 py-10 md:py-16 2xl:max-w-7xl mx-auto 2xl:px-0 relative\">\n        <h1 className=\"font-medium text-2xl\">{title}</h1>\n        <h2 className=\"text-sm text-neutral-400 mt-2\">{date}</h2>\n        <ShareButton url={`${siteUrl}${slug}`} className=\"mt-4\" />\n        {cover && (\n          <div className=\"max-w-4xl mt-10\">\n            <div className=\"aspect-w-16 aspect-h-9\">\n              <img\n                src={withPrefix(cover || '')}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n          </div>\n        )}\n        <div\n          dangerouslySetInnerHTML={{ __html: html || '<div />' }}\n          className=\"mt-10\"\n        />\n      </section>\n    </>\n  );\n};\n\nexport default MarkdownTemplate;\n\nexport const pageQuery = graphql`\n  query MarkdownTemplate($id: String!) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        cover\n        title\n        slug\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n"],"names":["data","markdownRemark","siteUrl","site","siteMetadata","html","frontmatter","title","cover","slug","date","className","url","src","withPrefix","dangerouslySetInnerHTML","__html"],"sourceRoot":""}